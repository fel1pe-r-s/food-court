// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String?  @map("password_hash")
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Order        Order[]

  @@map("users")
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String?
  priceInCents Int      @map("price_in_cents")
  imageUrl     String   @map("image_url")
  ingredients  String[]
  favourite    Boolean  @default(false)

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  OrderItem OrderItem[]

  @@map("products")
}

model OrderItem {
  id           String   @id @default(uuid())
  priceInCents Int      @map("price_in_cents")
  quantity     Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  product      Product? @relation(fields: [productId], references: [id])
  productId    String?

  @@map("orders_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERING
  DELIVERED
  CANCELLED
}

model Order {
  id           String      @id @default(uuid())
  totalInCents Int         @map("price_in_cents")
  Status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  user       User?       @relation(fields: [customerId], references: [id])
  customerId String?     @map("customer_id")
  OrderItem  OrderItem[]

  @@map("orders")
}
